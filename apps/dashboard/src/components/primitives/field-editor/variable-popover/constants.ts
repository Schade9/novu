import { Transformer } from './types';

export const TRANSFORMERS: Transformer[] = [
  // Text Transformations
  {
    label: 'Uppercase',
    value: 'upcase',
    description: 'Convert text to uppercase',
    example: '"hello" | upcase → HELLO',
  },
  {
    label: 'Lowercase',
    value: 'downcase',
    description: 'Convert text to lowercase',
    example: '"HELLO" | downcase → hello',
  },
  {
    label: 'Capitalize',
    value: 'capitalize',
    description: 'Capitalize the first character',
    example: '"hello" | capitalize → Hello',
  },
  {
    label: 'Strip HTML',
    value: 'strip_html',
    description: 'Remove all HTML tags from text',
    example: '"<p>text</p>" | strip_html → text',
  },
  {
    label: 'Strip Newlines',
    value: 'strip_newlines',
    description: 'Remove all newline characters',
    example: '"hello\\nworld" | strip_newlines → hello world',
  },
  {
    label: 'Escape',
    value: 'escape',
    description: 'Escape special characters',
    example: '"<hello>" | escape → &lt;hello&gt;',
  },
  {
    label: 'Truncate',
    value: 'truncate',
    hasParam: true,
    description: 'Truncate text to specified length',
    example: '"hello world" | truncate: 5 → hello...',
    params: [{ placeholder: 'Length (e.g. 20)', type: 'number' }],
  },
  {
    label: 'Truncate Words',
    value: 'truncatewords',
    hasParam: true,
    description: 'Truncate text to specified number of words',
    example: '"hello world and more" | truncatewords: 2 → hello world...',
    params: [{ placeholder: 'Word count', type: 'number' }],
  },
  {
    label: 'Replace',
    value: 'replace',
    hasParam: true,
    description: 'Replace all occurrences of a string',
    example: '"Hello Hello" | replace: "Hello", "Hi" → Hi Hi',
    params: [
      { placeholder: 'Search text', type: 'string' },
      { placeholder: 'Replace with', type: 'string' },
    ],
  },
  {
    label: 'Replace First',
    value: 'replace_first',
    hasParam: true,
    description: 'Replace first occurrence of a string',
    example: '"Hello Hello" | replace_first: "Hello", "Hi" → Hi Hello',
    params: [
      { placeholder: 'Search text', type: 'string' },
      { placeholder: 'Replace with', type: 'string' },
    ],
  },
  {
    label: 'Remove',
    value: 'remove',
    hasParam: true,
    description: 'Remove all occurrences of a string',
    example: '"Hello Hello" | remove: "ello" → H H',
    params: [{ placeholder: 'Text to remove', type: 'string' }],
  },
  {
    label: 'Remove First',
    value: 'remove_first',
    hasParam: true,
    description: 'Remove first occurrence of a string',
    example: '"Hello Hello" | remove_first: "ello" → H Hello',
    params: [{ placeholder: 'Text to remove', type: 'string' }],
  },
  {
    label: 'Append',
    value: 'append',
    hasParam: true,
    description: 'Add text to the end',
    example: '"Hello" | append: " World" → Hello World',
    params: [{ placeholder: 'Text to append', type: 'string' }],
  },
  {
    label: 'Prepend',
    value: 'prepend',
    hasParam: true,
    description: 'Add text to the beginning',
    example: '"World" | prepend: "Hello " → Hello World',
    params: [{ placeholder: 'Text to prepend', type: 'string' }],
  },
  {
    label: 'Slice',
    value: 'slice',
    hasParam: true,
    description: 'Extract a substring by position',
    example: '"hello" | slice: 0, 2 → he',
    params: [
      { placeholder: 'Start index', type: 'number' },
      { placeholder: 'Length (optional)', type: 'number' },
    ],
  },
  // Number Operations
  {
    label: 'Plus',
    value: 'plus',
    hasParam: true,
    description: 'Add a number',
    example: '5 | plus: 3 → 8',
    params: [{ placeholder: 'Number to add', type: 'number' }],
  },
  {
    label: 'Minus',
    value: 'minus',
    hasParam: true,
    description: 'Subtract a number',
    example: '5 | minus: 3 → 2',
    params: [{ placeholder: 'Number to subtract', type: 'number' }],
  },
  {
    label: 'Times',
    value: 'times',
    hasParam: true,
    description: 'Multiply by a number',
    example: '5 | times: 3 → 15',
    params: [{ placeholder: 'Number to multiply by', type: 'number' }],
  },
  {
    label: 'Divided By',
    value: 'divided_by',
    hasParam: true,
    description: 'Divide by a number',
    example: '10 | divided_by: 2 → 5',
    params: [{ placeholder: 'Number to divide by', type: 'number' }],
  },
  {
    label: 'Round',
    value: 'round',
    hasParam: true,
    description: 'Round to specified decimal places',
    example: '4.5678 | round: 2 → 4.57',
    params: [{ placeholder: 'Decimal places', type: 'number' }],
  },
  {
    label: 'Floor',
    value: 'floor',
    description: 'Round down to nearest integer',
    example: '4.6 | floor → 4',
  },
  {
    label: 'Ceil',
    value: 'ceil',
    description: 'Round up to nearest integer',
    example: '4.3 | ceil → 5',
  },
  {
    label: 'Abs',
    value: 'abs',
    description: 'Get absolute value',
    example: '-5 | abs → 5',
  },
  // Data Formatting
  {
    label: 'Date Format',
    value: 'date',
    hasParam: true,
    description: 'Format a date using strftime format',
    example: '"2024-01-20" | date: "%B %d, %Y" → January 20, 2024',
    params: [{ placeholder: 'Format (e.g. "%Y-%m-%d")', description: 'strftime format', type: 'string' }],
  },
  {
    label: 'Default',
    value: 'default',
    hasParam: true,
    description: 'Use default value if input is empty',
    example: '"" | default: "N/A" → N/A',
    params: [{ placeholder: 'Default value', type: 'string' }],
  },
  {
    label: 'JSON',
    value: 'json',
    description: 'Convert object to JSON string',
    example: '{name: "John"} | json → {"name":"John"}',
  },
  {
    label: 'Size',
    value: 'size',
    description: 'Get length of string or array',
    example: '"hello" | size → 5',
  },
  {
    label: 'Join',
    value: 'join',
    hasParam: true,
    description: 'Join array elements with separator',
    example: '["a","b"] | join: ", " → a, b',
    params: [{ placeholder: 'Separator (e.g. ", ")', type: 'string' }],
  },
  {
    label: 'Split',
    value: 'split',
    hasParam: true,
    description: 'Split string into array',
    example: '"a,b" | split: "," → ["a","b"]',
    params: [{ placeholder: 'Delimiter', type: 'string' }],
  },
  {
    label: 'First',
    value: 'first',
    description: 'Get first element of array',
    example: '[1,2,3] | first → 1',
  },
  {
    label: 'Last',
    value: 'last',
    description: 'Get last element of array',
    example: '[1,2,3] | last → 3',
  },
  {
    label: 'Map',
    value: 'map',
    hasParam: true,
    description: 'Extract property from each item in array',
    example: 'users | map: "name" → ["John", "Jane"]',
    params: [{ placeholder: 'Property name', type: 'string' }],
  },
  {
    label: 'Where',
    value: 'where',
    hasParam: true,
    description: 'Filter array by property value',
    example: 'users | where: "active", true → [activeUsers]',
    params: [
      { placeholder: 'Property name', type: 'string' },
      { placeholder: 'Value to match', type: 'string' },
    ],
  },
  {
    label: 'URL Encode',
    value: 'url_encode',
    description: 'Encode string for use in URL',
    example: '"hello world" | url_encode → hello%20world',
  },
  {
    label: 'URL Decode',
    value: 'url_decode',
    description: 'Decode URL-encoded string',
    example: '"hello%20world" | url_decode → hello world',
  },
];
